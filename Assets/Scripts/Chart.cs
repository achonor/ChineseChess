using Achonor;
using Assets.Scripts.Common;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;

namespace Assets.Scripts {
    /// <summary>
    /// 当前棋谱
    /// </summary>

    public class Chart {
        public static ulong[,,] ZobristValue = new ulong[2,7,90] {
            {   {286959831647352832,4463966094001625088,1475814881252950016,3676556006332463104,2963176009851330560,1315306968986552320,3244845179383750656,165453369144725504,3166582580013236224,4006997467969775616,4514338018123163648,695569142133725184,4406515471773216768,3923480540464021504,2981985771817183232,1400625105315168256,469355306257852416,4453240732742520832,3141703436990582784,4604171315723296768,1311607860719431680,365450529827303424,1970108914426869760,17887343687227392,3050432271025096704,1638526241311668224,4335987162447364096,2555984250925973504,1608239999044986880,4408516625004091392,3875681259633336320,2148279437420216320,1275982730014156800,1961229461040955392,2935018921549258752,4349727104405669888,438468153182007296,1689776446599872512,3791479858491207680,1038910822504988672,4230326095769606144,4606023459056056320,4501254591446923264,3045709774340378624,1385367149466408960,4183799063809492992,3769162985169557504,1140646727733118976,1955395309365723136,1262812563238307840,2173432429220874240,733111264504723456,3179055923019943936,2051968169882034176,2123158066896513024,3763350796533614592,1803618230791792640,68341684714545152,432062012416057344,4049900946594205696,2191794215734462464,2074912686785904640,4543807496016480256,463660303797485568,3384491710224242688,2783214118123048960,4126571329570281472,1642967337304444928,106101666303180800,2353941694843748352,3666033304664535040,1134839917005633536,2571466062369110016,1022693793982457856,2476748838960236544,2457053171756851200,4090837232425799680,850974635846742016,1301892320234022912,3786345056135092224,1758158216157978624,772592263459041280,998880688594991104,798925211888377856,834408525020391424,2220714308959657984,148574891261472768,2807114895108345856,4411074599029057536,449485594873575424},
                {2061746942165374976,2362762647129094144,3914312557067925504,1338863273704306688,2922522609057480704,481117860913494016,869506868784529408,1041386994059382784,2568358708011151360,2309847009171881984,2679625206721374208,2540218703381809152,894304981893955584,1937684464470650880,2793126399704799232,1772742354666633216,603251117100599296,2379694678275618816,2539835384397703168,2987995000145516544,2329251987649687552,1351712321333002240,1223768582459918336,627671091382007808,2207964854837800960,3919877886233772032,3514792066250215424,4340665953887588352,381542915200542720,1676000152592699392,1669870262977890304,3516767759836256256,1342359229457651712,4505656431728775168,4259649012217843712,1278725673088653312,4591343944404113408,4143459343581982720,1261559144884436992,3690375751114915840,4542383641028978688,2220255833518333952,2853768812377612288,4070357247733151744,69542611054254080,4156693731291766784,1920812882792173568,335988567131557888,4179660173716748288,4299222932076158976,1417589195619215360,1791035120421486592,3753257757630068736,2657805158718289920,1318550514913353728,1343533714742108160,3357399683407020032,2769052257222727680,2843791610893103104,3594795732926033920,3255910996323244032,2312470327586678784,954759293532069888,3861701919929389056,732224241200414720,3262741214346819584,736260452276363264,2577973406430095360,3714058349389955072,3207027397486327808,3147897391303780352,4174866341459838976,415829136143149056,335789076520316928,1422306633759911936,4478827159560361984,1197301091544033280,1296080886177605632,3385868349331888128,529776901401251840,4427408968898359296,3287075859701610496,3260897369474363392,801418615228182528,3295771511868391424,1482308510823657472,3832154848197210112,2597880080181229568,4404719319506792448,4192129178858389504},
                {2273907593538193408,3095821454807353344,1849041528881838080,1064835897893951488,2655662709672126464,559625444489504768,1980065980909264896,766277706913591296,2776956802495238144,4581109355092226048,2949962752139241472,1125653684139491328,4223578320173473792,4401783659484106752,2667529197651484672,349172014430636032,2626600391528783872,4063406860406822912,3823692176282628096,1032660611767371776,2312986346298533888,4534064036482883584,503537168848021504,3001096942508732416,2573015905502011392,1106573585694881792,1350817839640805376,3326043187127205888,4224448179916017664,1482970899826487296,4375121403451490304,1199473192944431104,3770609612341643264,482275454000777216,4366608078089666560,1444204090315120640,1236417132809244672,32082481823244288,1407480136976750592,4216538451269234688,678288444413974528,225250100441675776,2528719473907677184,4501890046709202944,3112106517033967616,3485670331351085056,1367880068822267904,1445732395900764160,2843363350713143296,1990739133588652032,2458186352445272064,820534179456090112,3398681774020417536,526496913421244416,4531318855674994688,3443776577285924864,4529239798715437056,2203316792743942144,1821852057222270976,432656331542280192,3475719796910086144,1613705578955483136,2127380652027371520,1757882992395319296,1321590807993307136,1892195399493140480,3026393418179497984,72683807206750208,3075317576250071040,314772518288003072,2050436454737070080,2107714788809619456,3144800380558092288,3002860251544623104,2381715325332572160,591000211637135360,2878727158106099712,4480594706759272448,698589192778080256,4326007146986156032,1073565222277777408,473533576366714880,1900640294242832384,868713860272263168,4221981491091968000,3558587230248681472,4027797541591388160,3916404531818772480,2872895659650768896,4157863837230981120},
                {4546879210646630400,2109135944245409792,567701474360385536,713178927737901056,2824056091171139584,3712385486711570432,4513066638995906560,3754683964485359616,2429743741646315520,4215289660449167360,793601583737145344,926854979626237952,3446278719277926400,3185502561739612160,859927151471820800,2306887108320552960,2507550038003654656,3545691434542528512,1770220372574693376,3717431665955307520,4343602045022019584,934402703508858880,3870439988296132608,1258920603739215872,3911565042955290624,690254693433448448,1476823287988078592,4359303924769640448,201179425722230784,2757649415551944704,1393028572859217920,2536186888675385344,719018831133100032,2855824532733194240,3557613964369172480,3786244355868925952,897195597855848448,1548447656260583424,4099324448701413376,1238980163928772608,2838587017387487232,939243277718282240,318462951638491136,1349470689381687296,2807657800797952000,1479733737274269696,4165234287360903168,4393417411518343168,2249126528402403328,2885897944768651264,2761705839291023360,723035309394165760,1065694938124767232,2963913949987190784,447886035655522304,4139918145010995200,2473538135862644736,3409030301905524736,442528845660182528,53931880380745728,3051071135670652928,3618187711342288896,3787336862835806208,4360903651904479232,3694890602187163648,3964758299808452608,1585423162675281920,3088561846840684544,4289763341529876480,4097200554768132096,2691945227417780224,1361357301559982080,4544931648649723904,605664665647820800,414296400121253888,995521524140089344,2139385353622431744,1548832600090697728,3518030886490529792,2510075063304124416,2704102294123028480,1636496855863087104,3480227208109844480,759371720889892864,1349505524930983936,4454950480552177664,2836750852095389696,1918330294738792448,2466648054825017344,3346846379644745728},
                {4389273912519053312,1735639647439994880,4064389367767343104,2799670623637800960,3820738940821540864,1214158368209008640,2825607628365361152,3955903805286502400,4196210895881674752,2624161917152483328,1465666178786457600,1322911287115800576,399523711341268992,1696808076248956928,1237061630379427840,2256947798250852352,2124276819629006848,457853901047859200,2674924159309199360,1456551479755577344,2938415352353972224,532911779311753216,2120679696841017344,4288102120233691136,3620952074015600640,2607039433148801024,4107660142989799424,1767115937833605120,4187279966425034752,1095933978556862464,4248402660511977472,1357886593169676288,4296129584917811200,3762827318477088768,173389807792035840,364026184025198592,105338666993960960,2717611470122295296,3647433092366948352,1688699364769366016,2398922475204175872,4470586412970166272,3129075731587942400,4332862335699275776,943817824377829376,2477835318348206080,2090262260682883072,213625430216603648,2828899010263838720,1848230856365199360,2614223501861613568,2985253143733501952,973294398101317632,3173589696280367104,1635294405283549184,312293541229846528,3033596880448256000,2891646485170147328,766587628160303104,660319899982098432,275012085545930752,168780607593117696,2262653683753732096,2673367458623846400,250322230441531392,375601754016045056,1431751240970962944,4594894353188337664,2626641215015290880,2620360077043105792,3705586894191712256,3908429330867568640,3852089432253622272,1448134551546298368,2627997157383929856,2903475825763307520,4373062809694644224,4030057237070340096,3354308016892252160,3401942264489414656,1911778476961652736,4416169982279059456,2611426425416089600,1412272577892466688,1945564842279479296,562617135630948352,1493088345985867776,2337529305892261888,180866354401017856,4162257569885497344},
                {2716380171284342784,1278512032352919552,3455421449208791040,3079800635853023232,37343883411394560,1886948153509031936,3875705706003613696,4006633585358950400,312960760295950336,3134755423744313344,115311046323757056,2635430309710876672,2404724581018738688,1457086390555387904,1672883456657678336,4602866568212334592,2578430880328835072,1832152399847731200,4290377142382325760,1508294494626707456,1614025049315465216,2106143453755523072,1292492565264099328,3171164928934111232,3409622273754658816,3784833360105598976,2982151572180647936,1501501807796944896,1688742540170780672,2646539956664348672,2146560410511007744,483133455722973184,552694067933036544,2214370505725505536,247312936189022208,810706504004194304,1290743501436508160,4272975068814651392,2691823365390598144,1884323375331325952,3676926489460473856,4277932238311741440,1685105651842447360,4299748912170561536,3436211189928888320,1597046502145464320,2503590567516962816,286217284891619328,3608421021915121664,3687188270352418816,1638288403640653824,4595359795527077888,1231024644336076800,231395341247299584,4527607755770097664,2837823321946185728,3635180861502537728,3207670593801048064,208744278833276928,1205833969828825088,828295230526394368,2841654967345336320,3610169579723423744,1562733641186390016,2784905961945823232,4368372270838816768,584159985401270272,3900567620122624,874205937609785344,4224336053988978688,2761901303378167808,4449273481273419776,4193686149886007296,1915036759798519808,126326645836873728,2787149211134851072,2411147653433757696,2157835361195481088,1501020485645383680,3822829786406735872,674234090166341632,2481821776833138688,767344215406217216,620348084408911872,804049552602490880,4260674619925897216,582056966664318976,2173972196374439936,1345977344343932928,17417035545475072},
                {3173367709063479296,3936073357269825536,2934953963623075840,385158063168917504,3468139324948402176,4334627633208551424,2964951256890105856,4587678425697495040,1625315778962628608,4354859062809784320,934638690953152512,4279151909164316672,3573467673102424064,1698869210451046400,3929398866356125696,519067959902691328,3651515088178470912,2061627962166624256,2251514839663835136,466711618282962944,2264442321122928640,468164397402800128,2082805763692601344,479940095631323136,4536597396969771008,3326074787538980864,3187899816917622784,2173225182686136320,3554061308649730048,3520632554126673920,2669307174113646592,3898451856072167424,1115464760178565120,4033180594988218368,287055936521295872,3987067507327725568,580235714058029056,3315664467511484416,2953256526394036224,1605215563375294464,2170940213986322432,877594224760737792,707604858285881344,2384034080314611712,2293021595826874368,277131549933074432,3264961639799709696,3302062446948007936,925739885995606016,2566284462679977984,259731376060209152,168633792567330816,2359708529710432256,3208758852997173248,3179750634231826432,742197535078774784,3164689594305153024,342842851956076544,3837189208289062912,3270447753364203520,1048044740708661248,2480190465828990976,4465995323327526912,2783732182869338112,1401075777067157504,4462321811765370880,1787154508047263744,3100900598793830400,1144568857802311680,4611574771226830848,4258293931205427200,2279465450309040128,1803660529081235456,3230663134525087744,819901998890557440,331460780689223680,1040774762622660608,90173514038493184,135064136272121856,1427465642921922560,1531632071326136320,3538536542719270912,3025871484210477056,380723666286745600,4067050809559603200,4051246131893348352,2739427236651632640,2875849935392081920,4241268403477577728,4303124032636493824}}
            ,{  {1787431808248041472,3078973967746734080,2308157083536627712,1299935907820711936,405944235685054464,3939574015435145216,474239577216010240,4319849618051878912,1238632871549081600,4246594339489736704,1239703360418680832,2888092542515994624,51304949679175680,2875424107687055360,1790193670159599616,1144930480597000192,229408723225534464,3886835408286865408,3942130851720282112,3467248544670617600,133938328732030976,2873236118462009344,2849343688687429632,3658327654897934336,1458986206649292800,4507771780362987520,1616950235267332096,2608785604058705920,52254065058301952,128980993268314112,593912067590823936,3051442420520146944,2400027649179471872,314960680110815232,826810014269460480,3886829201091309568,2504311078317154304,4444722003271671808,2233481123960784896,3602878114950901760,3688807757774825472,947769537149536256,493616594480027648,4496270483595290624,475766137656182784,461144535915728896,2588965994406750208,2505357186362918912,1575607858153125888,2018939052021348352,397665333738553344,3289241260973047808,1783320084636717056,2937645210088671232,2141322677854937088,545037097969612800,4555764190189965312,443223930832754688,3173134112460107776,3665632907137005568,3345088159992780800,3476243528617504768,2902554563356399616,1609952725658335232,105040514251540480,117592663919392768,2185464903545686016,3417450194821244928,258542127906392064,3279426465851410432,4309943503284752384,421360505255903232,1821145867227793408,3239846928533749760,470093435403427840,3058308751715688448,53323656998707200,883242365091387392,898721678357270528,3160356027475890176,918675129652420608,23013538679965696,1397299619285805056,1675478661008283648,1080405096885239808,3851644467290429440,563995262400501760,1032965215165149184,3835966895787882496,2160049312458123264},
                {3916927407327096832,3613953425582702592,478701336361996288,2526597769823588352,1307512726602020864,3744425034642485248,4189134363977474048,1885548304383993856,4514703627406028800,17288507534776320,3926244649197551616,379202877521256448,1619604133272221696,739529711124434944,2706985982553499648,3581480953256611840,1517297316337375232,3334035346983827456,2687148218858741760,3280074897322131456,1633099724109799424,2539089257293754368,485950558414432256,523994182789627904,1295861143304175616,3708800079710826496,1245647183428915200,764548594536302592,4099436269161420800,2297740772555546624,3557578925815396352,3403517074067025920,2851762265540909056,2350533698659788800,4245246139962769408,1268163976832647168,4194365819162497024,738602447752794112,2290081338488518656,3548504439556653056,1147534446813122560,264682538413191168,3988889159988731904,4592426322084431872,509425335995967488,1356724814629423104,2743991638142908416,2139824001462003712,2103160570268835840,189750199825790976,952263347919036416,1412372885018144768,173948709428336640,3403430853563940864,4016850149734422528,3853917327233298432,336964754460078080,4453230090324070400,4087499135695716352,4523886749235046400,2872464685027573760,1487211928711548928,1879833403390488576,2144064136510625792,2705474054675632128,3616295576894873600,587578315729389568,2388177301107650560,3109964255430750208,1514300320214568960,214680967796908032,648198284362428416,2764761017116102656,1185117177726095360,831895607281680384,2589703785167478784,3894897822274392064,1589032615372648448,791481006400804864,1214071106508998656,3042196537127856128,110177478172661760,556038330051852288,2839213100420972544,2532949206175819776,1457325838899793920,430108469394292736,1663872118887383040,1328234339535067136,1291052343268593664},
                {3377559516616804352,2658570683086700544,3968549397364629504,3434313783055319040,2649666766334433280,655379964663678976,3638954433799190528,2283788619580012544,3167842649993084928,303431838112526336,4597231212360493056,3362484316040165376,685380691953539072,3889413768726431744,786198699921686528,4275024329328668672,1844326408920025088,1022877819637164032,1138697345178585088,1667213467697602560,3468786527864832000,2181716097524961280,2103953490893051904,323336254113705984,3266778834524737536,2690805585430931456,3993907585448957952,1568959864196458496,3720345486561112064,1674106622982518784,3147483743136124928,4497471236028141568,3515130993198729216,320890790095335424,4194269149097299968,397785122558898176,3294463820081358848,1593253169932826624,3617293296013211648,3823747782083014656,1154649754219370496,3222372908711362560,3411987534082537472,3400264517180592128,1018507286005719040,2645336755896107008,2020610133238292480,3720003387854796800,3385178926808039424,4386205357926316032,2461337940532658176,2878809721892112384,2658364170835611648,4370528367447003136,3172232005718435840,1313704603411484672,3886850284391065600,3653915948883881984,3294186111364720640,2515042475309797376,4223861714465196032,815440907255871488,2751483347409661952,4204730080935329792,1810721823134914560,2217350897650946048,4501121723594825728,2716914320417490944,3219175764128837632,400475707814406144,4297559027446507520,4110479171116507136,1097144122409119744,4398901397618829312,3337776168713984000,3503169563476617216,2637334884630009856,3562125969373157376,3870066123543054336,2598387380991227904,1611574969062950912,2773473739853135872,4503144691424098304,3755047257916903424,4157982800988891136,3157167438413987840,3529408801150179328,2944820070981808128,238967685797736448,3367072458967889920},
                {4049129544601141248,1420209403044657152,3880816044139954176,1151965588941676544,2046815908971184128,3305460268533245952,3478339851420762112,2320066251299065856,554180682928101376,33626180172113920,2326036486711543808,3464850853969539072,2653770918220118016,2688312430528804864,1038119398877300736,2050793734805225472,3174395253511147520,4213310700833445888,1128926764775391232,2265142689532385280,837935254791180288,611709292308301824,2069995072164315136,1940447586202767360,602032146658648064,3319369537923194880,1779840270937305088,1103745875195228160,2440964043776501760,2539604758360248320,3193653297957619712,2414679891729797120,766922829210214400,2842791287223293952,4310148749586257920,62236322697945088,2716035545769654272,2740800999713318912,1734571588781021184,1666676480326299648,1238325773543190528,1205830513591699456,4020544641530943488,1378346637438545920,2359506617908531200,72044132644868096,80515956178300928,2149640411573618688,2145786135557390336,4123435951839434752,2292110501597192192,2845740042331170816,1459084131049172992,649766216256831488,142866623547412480,4191196268412751872,3834886720256991232,2126743044581466112,1602229701934053376,945216834034505728,345008828427984896,1458729293622661120,3212827661088157696,2682010334066935808,2373168451916636160,2910679886104035328,48729464443330560,2974771524040546304,3774839284448737280,1865312538153695232,741973970193608704,4191682815918575616,3302453254060984320,1025307180071002112,4222060553050234880,31642206341185536,3271766844419153920,1230186212803313664,2836112715971024896,3107771866345304064,1333746550600337408,4020358373442478080,3464964174196109312,976733534137937920,843192259964098560,3809582540678289408,568749576708683776,4567686146482008064,839570691278247936,2947691645907238912},
                {1152597006357510144,3316984304313739264,2608419225932193792,341661883712890880,3041571701597710336,2980372730543665152,4127951855854317568,477042006380767232,3137157947822063616,316588064932925440,3093254900720986112,793454241581316096,2311799442212292608,1955252695244859392,4525573506799949824,3436072111838140416,3474568167187736576,2359468103829329920,4322266877592635392,2454388211364986880,1490004045121783808,1404550610317385728,144818422127757312,4287473930616035328,2540145796677849088,61824865111134208,605553349496369152,1850037100794392576,3295958964003819520,3720334129675610112,1747574021864949760,1018439001383970816,1533395739885336576,1899953065955346432,3039643901974345728,891527559856082944,4498094508749727744,4570043982943283200,3072391824094537728,922708128125673472,3576677020374267904,3339680942883405824,891660047555278848,3533237014878183424,3937798076099420160,566975297202747392,3517600989219016704,436440804712339456,3638554231825707008,1486533405804232704,2693062360246319104,1855980112076789760,2742653098675378176,988394597331494912,4172438682970578944,2679436025712631808,4061898002813919232,3167217679969949696,198498822473918464,4328773755025768448,2803452191209478144,876645746951395328,1647133492310501376,3383827933901744128,1017020168347799552,2631124951136526336,315541258312357888,4092713775918422016,4041355565195264,93658574300420096,438112033519161344,514971826785652736,3932085065370435584,3209056647575707648,2753602174539862016,1715754831764054016,2509709580654010368,3552881832673021952,4192412502307966976,3536177675720148992,3921026485043212288,597957377722914816,3726642712315004928,1819373575146964992,2747675173266907136,2615372873764739072,4580382993136486400,3732642203126323200,2133682224385853440,1255619209990711296},
                {3235521962315546624,3426298578398365696,2733762776570865664,656103662486011904,4357462656320786432,79721945102741504,3428544315592517632,607645003517405184,3939800171094960128,947964590687152128,417852510158901248,263549851089373184,4385584573268795392,446473468194330624,3642341204665405440,330812194905135104,596857105543006208,1315293997234124800,2103164818225727488,4444955579477839872,115126328607154176,897183661384484864,2090183178675337216,579786367266205696,4480398801562185728,2802772334960910336,2288294057137311744,2469694799041374208,740462985013673984,196581181126623232,1462224796534747136,3333359687110711296,103236106437079040,170642730022250496,4000594359512928256,3835816862354307072,2287225078969661440,1810547731502759936,2892774377094273024,2671507875979585536,100534360412133376,1550833652508368896,1634201823980541952,3600715249150089216,554174371444529152,925076203327850496,3887259184507725824,565160330194247680,4119299182649012224,3966144645863385088,1271517316784932864,2549696884057917440,3176465375381354496,1376622834950981632,1430093075550822400,2221652560239257600,4339992765259681792,1106085931083812864,3492430695378190336,2459607240562909184,2574295664445683712,4568694341128132608,857796848034156544,4418142398244261888,4040529769605179392,1950918123846701056,2261144319653160960,2374901328027525120,3508358891788046336,3948516464128227328,1573152988483072000,1431295179965337600,4214699346378498048,552896703297210368,2581040527834681344,3155573290944249856,3937534993114343424,149585946192742400,1078948838181171200,2227459551982133248,2011016104078086144,1520036365845260288,232248734075672576,4000905979130030080,2869348715870691328,4367515361901064192,3481528470831327232,2374705517142945792,140436838163755008,253401219008569344},
                {1882421698866665472,3421503311081236480,4300506598377621504,2579159182492958720,1785836315101937664,2725843510280155136,4223033949575243776,2946309075927304192,3668673584776595456,1433542116164679680,1117892557925834752,493582014766094336,1877655678279872512,699900069955434496,2632949478675376128,4044572570874036224,2941150051227815936,2033785804336052224,2809012626870185984,4307578574577078272,2932106673638139904,262902928758204416,1408319823928334336,3431100514257666048,4537191756131168256,1680409855868329984,3284295442043090944,1433671157995794432,1888988670466027520,3236522044515158016,1740225854344374272,4272107522066567168,3650369183183038464,3694989491006095360,2269039302623995904,1702740619312793600,2376675296961941504,787319592878864384,4463954490663786496,338474530887004160,3613579688220862464,3845951127752122368,2739382524699289600,4066213026652991488,3000834938285393920,4362331095170756608,2785131347004932096,2217211218775025664,4571163990512848896,4188013942547116032,2044509936548440064,1691125489409802240,309012982257446912,2500733405987248128,584243766014078976,675537397435928576,3141068805535150080,790319344512358400,781003244396093440,2428077257110239232,2127228546344163328,265787859410534400,3170202648421765120,1743750064811134976,1160348934377639936,4363634872438597632,2692467769846018048,4335820200875302912,3162300352447277056,1202094433035745280,2544219143911553024,1688190826689617920,1375547048444166144,3756015325782761472,1925105559058710528,1577552166242770944,1576102874503641088,3983168967930689536,2185387624740868096,762336263860084736,2806673220582977536,827075906128463872,1602962681619058688,814251219173236736,1650897051420112896,2078352916196071424,3653658044611125248,3873007067492235264,3535247667218530304,3776527465371244544}}
        };

        /// <summary>
        /// 棋子的位置
        /// </summary>
        public int[] ChessPointKeys = new int[32];

        /// <summary>
        /// 点上面的棋子
        /// </summary>
        public Dictionary<int, int> PointKey2ChessDict;

        /// <summary>
        /// 行状态
        /// </summary>
        public int[] ChartStatusX = new int[16];

        public int[] ChartStatusY = new int[16];

        /// <summary>
        /// 是否红方下
        /// </summary>
        private bool mIsRedPlayChess = true;
        public bool IsRedPlayChess {
            get {
                return mIsRedPlayChess;
            }
        }

        private Stack<Record> RecordsStack = new Stack<Record>();
        public List<Record> Records {
            get {
                return RecordsStack.ToList();
            }
        }

        private ulong mZobristKey = 0;
        private ulong ZobristKey {
            get {
                return mZobristKey;
            }
        }


        public Chart() {
            mZobristKey = 0;
            //红旗先下
            mIsRedPlayChess = true;
            //添加红棋
            ChessPointKeys[0] = 7 * 16 + 3;
            ChessPointKeys[1] = 6 * 16 + 3;
            ChessPointKeys[2] = 8 * 16 + 3;
            ChessPointKeys[3] = 5 * 16 + 3;
            ChessPointKeys[4] = 9 * 16 + 3;
            ChessPointKeys[5] = 4 * 16 + 3;
            ChessPointKeys[6] = 10 * 16 + 3;
            ChessPointKeys[7] = 3 * 16 + 3;
            ChessPointKeys[8] = 11 * 16 + 3;
            ChessPointKeys[9] = 4 * 16 + 5;
            ChessPointKeys[10] = 10 * 16 + 5;
            ChessPointKeys[11] = 3 * 16 + 6;
            ChessPointKeys[12] = 5 * 16 + 6;
            ChessPointKeys[13] = 7 * 16 + 6;
            ChessPointKeys[14] = 9 * 16 + 6;
            ChessPointKeys[15] = 11 * 16 + 6;

            //添加黑棋
            ChessPointKeys[16] = 7 * 16 + 12;
            ChessPointKeys[17] = 8 * 16 + 12;
            ChessPointKeys[18] = 6 * 16 + 12;
            ChessPointKeys[19] = 9 * 16 + 12;
            ChessPointKeys[20] = 5 * 16 + 12;
            ChessPointKeys[21] = 10 * 16 + 12;
            ChessPointKeys[22] = 4 * 16 + 12;
            ChessPointKeys[23] = 11 * 16 + 12;
            ChessPointKeys[24] = 3 * 16 + 12;
            ChessPointKeys[25] = 10 * 16 + 10;
            ChessPointKeys[26] = 4 * 16 + 10;
            ChessPointKeys[27] = 11 * 16 + 9;
            ChessPointKeys[28] = 9 * 16 + 9;
            ChessPointKeys[29] = 7 * 16 + 9;
            ChessPointKeys[30] = 5 * 16 + 9;
            ChessPointKeys[31] = 3 * 16 + 9;
            UpdateChart();
        }

        public Chart(Chart chart) {
            mIsRedPlayChess = chart.mIsRedPlayChess;
            Array.Copy(chart.ChessPointKeys, ChessPointKeys, ChessPointKeys.Length);
            UpdateChart();
        }

        public static Chart Clone(Chart chart) {
            return new Chart(chart);
        }

        public ulong GetChartKey() {
            //byte[] bytes = new byte[33];

            //bytes[0] = (byte)(IsRedPlayChess ? 0 : 1);
            //for (int i = 0; i < ChessPointKeys.Length; i++) {
            //    bytes[i] += (byte)ChessPointKeys[i];
            //}
            //for (int i = 1; i < 6; i++) {
            //    Array.Sort<byte>(bytes, i * 2 - 1, 2);
            //}
            //Array.Sort<byte>(bytes, 11, 5);
            //Array.Sort<byte>(bytes, 27, 5);
            //bytes[32] = (byte)(IsRedPlayChess ? 0 : 1);
            //return Convert.ToBase64String(bytes);

            return ZobristKey;
        }


        /// <summary>
        /// 更新
        /// </summary>
        public void UpdateChart() {
            if (null == PointKey2ChessDict) {
                PointKey2ChessDict = new Dictionary<int, int>();
            }
            PointKey2ChessDict.Clear();
            for (int i = 0; i < ChessPointKeys.Length; i++) {
                if (-1 == ChessPointKeys[i]) {
                    //阵亡
                    continue;
                }
                if (PointKey2ChessDict.ContainsKey(ChessPointKeys[i])) {
                    continue;
                }
                PointKey2ChessDict.Add(ChessPointKeys[i], i);
            }
            for (int i = 0; i < 16; i++) {
                for (int k = 0; k < 16; k++) {
                    int point = BoardTools.GetPointByPosition(i, k);
                    SetChartStatus(point, -1 != GetChessByPoint(point));
                }
            }
        }

        /// <summary>
        /// 获取收影响的点
        /// </summary>
        /// <param name="point"></param>
        /// <returns></returns>
        public void CalcAllAffectedChess(int point, HashSet<int> result) {
            for (int i = 0; i < BoardTools.AllAffectedPoints.Length; i++) {
                int newPoint = point + BoardTools.AllAffectedPoints[i];
                if (!BoardTools.IsInBoard(newPoint)) {
                    continue;
                }
                int chessID;
                if (!GetChessByPoint(newPoint, out chessID)) {
                    continue;
                }
                if (ChessType.Xiang == BoardTools.GetChessType(chessID)) {
                    continue;
                }
                ChessType chessType = BoardTools.GetChessType(chessID);
                if ((ChessType.Shuai == chessType || ChessType.Shi == chessType) && (!BoardTools.IsInJiuGong(point))){
                    continue;    
                }
                bool isRedChess = BoardTools.IsRedChess(chessID);
                if (ChessType.Bing == chessType && ((isRedChess && (point & 0xF) < (newPoint & 0xF)) || (!isRedChess && (newPoint & 0xF) < (point & 0xF)))) {
                    continue;
                }
                result.Add(chessID);
            }
            for (int i = 0; i < BoardTools.ShiAffectedPoints.Length; i++) {
                int newPoint = point + BoardTools.ShiAffectedPoints[i];
                if (!BoardTools.IsInBoard(newPoint) || !BoardTools.IsInJiuGong(point) || !BoardTools.IsInJiuGong(newPoint)) {
                    continue;
                }
                int chessID;
                if (!GetChessByPoint(newPoint, out chessID)) {
                    continue;
                }
                if (ChessType.Shi != BoardTools.GetChessType(chessID)) {
                    continue;
                }
                result.Add(chessID);
            }

            for (int i = 0; i < BoardTools.XiangAffectedPoints.Length; i++) {
                int newPoint = point + BoardTools.XiangAffectedPoints[i];
                if (!BoardTools.IsInBoard(newPoint)) {
                    continue;
                }
                int chessID;
                if (!GetChessByPoint(newPoint, out chessID)) {
                    continue;
                }
                if (ChessType.Xiang != BoardTools.GetChessType(chessID)) {
                    continue;
                }
                bool isRedChess = BoardTools.IsRedChess(chessID);
                if ((isRedChess && (!BoardTools.IsInRedRange(point))) || (!isRedChess && BoardTools.IsInRedRange(point))){
                    continue;
                }
                result.Add(chessID);
            }
            for (int i = 0; i < BoardTools.MaAffectedPoints.Length; i++) {
                int newPoint = point + BoardTools.MaAffectedPoints[i];
                if (!BoardTools.IsInBoard(newPoint)) {
                    continue;
                }
                int chessID;
                if (!GetChessByPoint(newPoint, out chessID)) {
                    continue;
                }
                if (ChessType.Ma != BoardTools.GetChessType(chessID)) {
                    continue;
                }
                result.Add(chessID);
            }
            for (int i = 0; i < 19; i++) {
                int newPoint;
                if (i < 9) {
                    newPoint = BoardTools.GetPointByPosition(i + 3, (point & 0xF));
                } else {
                    newPoint = BoardTools.GetPointByPosition((point >> 4), (i - 9 + 3));
                }
                int chessID;
                if (!GetChessByPoint(newPoint, out chessID)) {
                    continue;
                }
                ChessType chessType = BoardTools.GetChessType(chessID);
                if (chessType != ChessType.Pao && chessType != ChessType.Che) {
                    continue;
                }
                int rangeCount = GetLineChessCount(point, newPoint);
                if (chessType == ChessType.Pao) {
                    if (2 <= rangeCount) {
                        continue;
                    }
                }
                if (chessType == ChessType.Che) {
                    if (1 <= rangeCount) {
                        continue;
                    }
                }
                result.Add(chessID);
            }
        }

        public void SetChartStatus(int point, bool status) {
            Vector2Int pointPos = BoardTools.PointToPosition(point);
            if (status) {
                ChartStatusX[pointPos.x] |= (1 << pointPos.y);
                ChartStatusY[pointPos.y] |= (1 << pointPos.x);
            } else {
                ChartStatusX[pointPos.x] &= ((~(1 << pointPos.y)) & 0xFFFF);
                ChartStatusY[pointPos.y] &= ((~(1 << pointPos.x)) & 0xFFFF);
            }
        }
        /// <summary>
        /// 线段上是否有棋子
        /// </summary>
        /// <returns></returns>
        public bool LineHasChess(int aPoint, int bPoint) {
            return 0 < GetLineChessCount(aPoint, bPoint);
        }

        /// <summary>
        /// 线段上的棋子数量
        /// </summary>
        /// <param name="aPoint"></param>
        /// <param name="bPoint"></param>
        /// <returns></returns>
        public byte GetLineChessCount(int aPoint, int bPoint) {
            Vector2Int aPointPos = BoardTools.PointToPosition(aPoint);
            Vector2Int bPointPos = BoardTools.PointToPosition(bPoint);
            if (aPointPos.x == bPointPos.x) {
                int rangeLen = Math.Abs(aPointPos.y - bPointPos.y) - 1;
                return BoardTools.GetBinaryOneCount(ChartStatusX[aPointPos.x] & ((0XFFFF >> (16 - rangeLen)) << Math.Min(aPointPos.y, bPointPos.y) + 1));
            } else if (aPointPos.y == bPointPos.y) {
                int rangeLen = Math.Abs(aPointPos.x - bPointPos.x) - 1;
                return BoardTools.GetBinaryOneCount(ChartStatusY[aPointPos.y] & ((0XFFFF >> (16 - rangeLen)) << Math.Min(aPointPos.x, bPointPos.x) + 1));
            }
            return 0;
        }

        public int GetChessByPoint(int point) {
            if (!PointKey2ChessDict.ContainsKey(point)) {
                return -1;
            }
            return PointKey2ChessDict[point];
        }

        /// <summary>
        /// 获取点上的象棋
        /// </summary>
        /// <param name="point"></param>
        /// <param name="chessID"></param>
        /// <returns></returns>
        public bool GetChessByPoint(int point, out int chessID) {
            chessID = -1;
            if (!PointKey2ChessDict.ContainsKey(point)) {
                return false;
            }
            chessID = PointKey2ChessDict[point];
            return true;
        }

        /// <summary>
        /// 判断point是否有棋子
        /// </summary>
        /// <param name="point"></param>
        /// <returns></returns>
        public bool PointHasChess(int point) {
            return (0 != (ChartStatusX[point >> 4] & (1 << (point & 0xF))));
        }

        public int GetChessPoint(int chessID) {
            if (-1 == ChessPointKeys[chessID]) {
                return -1;
            }
            return ChessPointKeys[chessID];
        }


        /// <summary>
        /// 能否停留
        /// </summary>
        /// <param name="point"></param>
        /// <returns></returns>
        public bool IsCanStay(bool isRedChess, int point) {
            if (!BoardTools.IsInBoard(point)) {
                return false;
            }
            int chessID;
            if (GetChessByPoint(point, out chessID)) {
                return isRedChess != BoardTools.IsRedChess(chessID);
            }
            return true;
        }

        /// <summary>
        /// 是否过河
        /// </summary>
        /// <returns></returns>
        public bool IsPassRiver(int chessID) {
            int point = GetChessPoint(chessID);
            bool isRedChess = BoardTools.IsRedChess(chessID);
            return isRedChess ? BoardTools.IsInRedRange(point) : (!BoardTools.IsInRedRange(point));
        }

        /// <summary>
        /// 是否在将军
        /// </summary>
        /// <param name="isRedChess"></param>
        /// <returns></returns>
        public bool IsJiangJun(bool isRedChess) {
            int enemyShuaiPoint = GetShuaiPoint(!isRedChess);
            for (int i = 0; i < 16; i++) {
                int tempID = (i | (isRedChess ? 0 : 16));
                List<int> tempPoints = GetMovePoints(tempID);
                for (int k = 0; k < tempPoints.Count; k++) {
                    if (enemyShuaiPoint == tempPoints[k]) {
                        return true;
                    }
                }
            }
            return false;
        }

        /// <summary>
        /// 判断是否绝杀
        /// </summary>
        /// <param name="isRedChess"></param>
        /// <returns></returns>
        public bool IsJueSha(bool isRedChess) {
            for (int i = 0; i < 16; i++) {
                int chessID = (i | (isRedChess ? 16 : 0));
                List<int> tempPoints = GetMovePoints(chessID);
                for (int k = 0; k < tempPoints.Count; k++) {
                    //判断移动之后是否还是被将军
                    Chart chart = Chart.Clone(this);
                    chart.MoveChess(chessID, tempPoints[k]);
                    if (!chart.IsJiangJun(isRedChess)) {
                        return false;
                    }
                }
            }
            return true;
        }

        public int GetShuaiPoint(bool isRedChess) {
            return GetChessPoint((isRedChess ? 0 : 16));
        }

        /// <summary>
        /// 获取棋谱评分
        /// </summary>
        /// <returns></returns>
        public int GetScore(bool isRedChess) {
            int redScore = 0;
            for (int i = 0; i < 16; i++) {
                redScore += GetChessScore(i);
            }
            int blockScore = 0;
            for (int i = 16; i < 32; i++) {
                blockScore += GetChessScore(i);
            }
            return isRedChess ? (redScore - blockScore) : (blockScore - redScore);
        }

        /// <summary>
        /// 获取棋子评分
        /// </summary>
        /// <returns></returns>
        public int GetChessScore(int chessID) {
            ChessType chessType = BoardTools.GetChessType(chessID);
            if (-1 == GetChessPoint(chessID)) {
                return 0;
            }
            int addScore = BoardTools. GetChessPointScore(chessID, GetChessPoint(chessID));
            if (chessType == ChessType.Shuai) {
                return 10000 + addScore;
            } else if (chessType == ChessType.Shi) {
                return 150 + addScore;
            } else if (chessType == ChessType.Xiang) {
                return 150 + addScore;
            } else if (chessType == ChessType.Ma) {
                return 230 + ((32 - PointKey2ChessDict.Count) * 2) + addScore;
            } else if (chessType == ChessType.Che) {
                return 500 + addScore;
            } else if (chessType == ChessType.Pao) {
                return 250 + addScore;
            } else {
                return 100 + addScore;
            }
        }

        /// <summary>
        /// 移动棋子
        /// </summary>
        /// <param name="chessID"></param>
        /// <param name="point"></param>
        public void MoveChess(int chessID, int point, bool showLog = false) {
            int oldChessID;
            if (GetChessByPoint(point, out oldChessID)) {
                //吃掉棋子
                ChessPointKeys[oldChessID] = -1;
            }
            //记录
            Record record = new Record();
            record.AChessID = chessID;
            record.APoint = ChessPointKeys[chessID];
            record.BChessID = oldChessID;
            record.BPoint = point;
            RecordsStack.Push(record);
            //更新状态
            SetChartStatus(record.APoint, false);
            SetChartStatus(record.BPoint, true);

            //移动棋子
            PointKey2ChessDict.Remove(ChessPointKeys[chessID]);
            ChessPointKeys[chessID] = record.BPoint;
            Achonor.Function.Update(PointKey2ChessDict, ChessPointKeys[chessID], chessID);
            mIsRedPlayChess = !mIsRedPlayChess;

            //更新ZobristKey
            bool isRedChess = BoardTools.IsRedChess(record.AChessID);
            ChessType chessType = BoardTools.GetChessType(record.AChessID);
            int zobristIndex1 = ((record.APoint >> 4) - 3) * 10 + ((record.APoint & 0xF) - 3);
            int zobristIndex2 = ((record.BPoint >> 4) - 3) * 10 + ((record.BPoint & 0xF) - 3);
            if (zobristIndex1 < 0 || 90 <= zobristIndex1 || zobristIndex2 < 0 || 90 <= zobristIndex2) {
                Debug.Log("");
            }
            mZobristKey ^= ZobristValue[isRedChess ? 0 : 1, (int)chessType, zobristIndex1];
            mZobristKey ^= ZobristValue[isRedChess ? 0 : 1, (int)chessType, zobristIndex2];
        }

        /// <summary>
        /// 返回上一步
        /// </summary>
        public bool BackStep() {
            if (RecordsStack.Count <= 0) {
                return false;
            }
            Record record = RecordsStack.Pop();
            if (-1 != record.BChessID) {
                ChessPointKeys[record.BChessID] = record.BPoint;
                PointKey2ChessDict[record.BPoint] = record.BChessID;
                SetChartStatus(record.BPoint, true);
            } else {
                PointKey2ChessDict.Remove(record.BPoint);
                SetChartStatus(record.BPoint, false);
            }
            ChessPointKeys[record.AChessID] = record.APoint;
            Achonor.Function.Update(PointKey2ChessDict, record.APoint, record.AChessID);
            mIsRedPlayChess = !mIsRedPlayChess;
            SetChartStatus(record.APoint, true);

            //更新ZobristKey
            bool isRedChess = BoardTools.IsRedChess(record.AChessID);
            ChessType chessType = BoardTools.GetChessType(record.AChessID);
            int zobristIndex1 = ((record.APoint >> 4) - 3) * 10 + ((record.APoint & 0xF) - 3);
            int zobristIndex2 = ((record.BPoint >> 4) - 3) * 10 + ((record.BPoint & 0xF) - 3);
            mZobristKey ^= ZobristValue[isRedChess ? 0 : 1, (int)chessType, zobristIndex1];
            mZobristKey ^= ZobristValue[isRedChess ? 0 : 1, (int)chessType, zobristIndex2];

            return true;
        }

        public void PrintStep() {
            StringBuilder printText = new StringBuilder();
            List<Record> records = RecordsStack.ToList();
            records.Reverse(0, RecordsStack.Count);
            for (int i = 0; i < records.Count; i++) {
                Record record = records[i];
                printText.Append("->");
                printText.Append(BoardTools.PrintStep(record.AChessID, record.APoint, record.BPoint));
            }
            Debug.Log(printText.ToString());
        }

        public List<MovePoint> GetAllMovePoints(bool isRedChess) {
            List<MovePoint> result = new List<MovePoint>();
            for (int i = 0; i < 16; i++) {
                int chessID = (BoardTools.ChessCheckOrder[i] + (isRedChess ? 0 : 16));
                List<int> movePoints = GetMovePoints(chessID);
                for (int k = 0; k < movePoints.Count; k++) {
                    result.Add(new MovePoint() {
                        ChessID = chessID,
                        PointKey = movePoints[k]
                    });
                }
            }
            return result;
        }

        /// <summary>
        /// 获取可以走的点
        /// </summary>
        /// <param name="chessID"></param>
        /// <returns></returns>
        public List<int> GetMovePoints(int chessID) {
            List<int> result = new List<int>();
            ChessType chessType = BoardTools.GetChessType(chessID);
            int pointKey = ChessPointKeys[chessID];
            if (-1 == pointKey) {
                return result;
            }
            if (chessType == ChessType.Shuai) {
                result = GetMovePoints_Shuai(this, chessID);
            } else if (chessType == ChessType.Shi) {
                result = GetMovePoints_Shi(this, chessID);
            } else if (chessType == ChessType.Xiang) {
                result = GetMovePoints_Xiang(this, chessID);
            } else if (chessType == ChessType.Ma) {
                result = GetMovePoints_Ma(this, chessID);
            } else if (chessType == ChessType.Che) {
                result = GetMovePoints_Che(this, chessID);
            } else if (chessType == ChessType.Pao) {
                result = GetMovePoints_Pao(this, chessID);
            } else if (chessType == ChessType.Bing) {
                result = GetMovePoints_Bing(this, chessID);
            }
            return result;
        }

        /// <summary>
        /// 获取可行走范围内指定颜色的棋
        /// </summary>
        /// <param name="chessID"></param>
        /// <param name="isRedChess"></param>
        /// <returns></returns>
        public List<int> GetInRangeChess(int chessID, bool isRedChess) {
            List<int> result = new List<int>();
            if (ChessPointKeys.Length <= chessID) {
                return result;
            }
            int pointKey = ChessPointKeys[chessID];
            if (-1 == pointKey) {
                //阵亡
                return result;
            }
            ChessType chessType = BoardTools.GetChessType(chessID);
            if (chessType == ChessType.Shuai) {
                result = GetInRangeChess_Shuai(this, chessID, isRedChess);
            } else if (chessType == ChessType.Shi) {
                result = GetInRangeChess_Shi(this, chessID, isRedChess);
            } else if (chessType == ChessType.Xiang) {
                result = GetInRangeChess_Xiang(this, chessID, isRedChess);
            } else if (chessType == ChessType.Ma) {
                result = GetInRangeChess_Ma(this, chessID, isRedChess);
            } else if (chessType == ChessType.Che) {
                result = GetInRangeChess_Che(this, chessID, isRedChess);
            } else if (chessType == ChessType.Pao) {
                result = GetInRangeChess_Pao(this, chessID, isRedChess);
            } else if (chessType == ChessType.Bing) {
                result = GetInRangeChess_Bing(this, chessID, isRedChess);
            }
            return result;
        }


        /// <summary>
        /// 帅将能移动的点
        /// </summary>
        public static List<int> GetMovePoints_Shuai(Chart chart, int chessID) {
            List<int> result = new List<int>();
            int pointKey = chart.ChessPointKeys[chessID];
            List<int> movePoints = BoardTools.GetMovePoints(chessID, pointKey);
            for (int i = 0; i < movePoints.Count; i++) {
                int newPoint = movePoints[i];
                if (chart.PointHasChess(newPoint)) {
                    if (BoardTools.IsRedChess(chessID) == BoardTools.IsRedChess(chart.GetChessByPoint(newPoint))) {
                        continue;
                    }
                }
                result.Add(newPoint);
            }
            //飞将的情况
            int enemyShuaiPoint = chart.GetChessPoint((chessID ^ 16));
            if (-1 != enemyShuaiPoint && (enemyShuaiPoint >> 4) == (pointKey >> 4)) {
                if (chart.GetLineChessCount(pointKey, enemyShuaiPoint) <= 0) {
                    result.Add(enemyShuaiPoint);
                }
            }
            return result;
        }

        public static List<int> GetInRangeChess_Shuai(Chart chart, int chessID, bool isRedChess) {
            List<int> result = new List<int>();
            int pointKey = chart.ChessPointKeys[chessID];
            List<int> movePoints = BoardTools.GetMovePoints(chessID, pointKey);
            for (int i = 0; i < movePoints.Count; i++) {
                int newPoint = movePoints[i];
                int tempChessID;
                if (!chart.GetChessByPoint(newPoint, out tempChessID)) {
                    continue;
                }
                if (isRedChess != BoardTools.IsRedChess(tempChessID)) {
                    continue;
                }
                result.Add(tempChessID);
            }
            return result;
        }

        public static List<int> GetMovePoints_Shi(Chart chart, int chessID) {
            List<int> result = new List<int>();
            int pointKey = chart.ChessPointKeys[chessID];
            List<int> movePoints = BoardTools.GetMovePoints(chessID, pointKey);
            for (int i = 0; i < movePoints.Count; i++) {
                int newPoint = movePoints[i];
                if (chart.PointHasChess(newPoint)) {
                    if (BoardTools.IsRedChess(chessID) == BoardTools.IsRedChess(chart.GetChessByPoint(newPoint))) {
                        continue;
                    }
                }
                result.Add(newPoint);
            }
            return result;
        }

        public static List<int> GetInRangeChess_Shi(Chart chart, int chessID, bool isRedChess) {
            List<int> result = new List<int>();
            int pointKey = chart.ChessPointKeys[chessID];
            List<int> movePoints = BoardTools.GetMovePoints(chessID, pointKey);
            for (int i = 0; i < movePoints.Count; i++) {
                int newPoint = movePoints[i];
                int tempChessID;
                if (!chart.GetChessByPoint(newPoint, out tempChessID)) {
                    continue;
                }
                if (isRedChess != BoardTools.IsRedChess(tempChessID)) {
                    continue;
                }
                result.Add(tempChessID);
            }
            return result;
        }

        public static List<int> GetMovePoints_Xiang(Chart chart, int chessID) {
            List<int> result = new List<int>();
            int pointKey = chart.ChessPointKeys[chessID];
            List<int> movePoints = BoardTools.GetMovePoints(chessID, pointKey);

            for (int i = 0; i < movePoints.Count; i++) {
                int newPoint = movePoints[i];
                if (chart.PointHasChess(newPoint)) {
                    if (BoardTools.IsRedChess(chessID) == BoardTools.IsRedChess(chart.GetChessByPoint(newPoint))) {
                        continue;
                    }
                }
                if (chart.PointHasChess((pointKey + newPoint) / 2)) {
                    continue;
                }
                result.Add(newPoint);
            }
            return result;
        }

        public static List<int> GetInRangeChess_Xiang(Chart chart, int chessID, bool isRedChess) {
            List<int> result = new List<int>();
            int pointKey = chart.ChessPointKeys[chessID];
            List<int> movePoints = BoardTools.GetMovePoints(chessID, pointKey);

            for (int i = 0; i < movePoints.Count; i++) {
                int newPoint = movePoints[i];
                if (chart.PointHasChess((pointKey + newPoint) / 2)) {
                    continue;
                }
                int tempChessID;
                if (!chart.GetChessByPoint(newPoint, out tempChessID)) {
                    continue;
                }
                if (isRedChess != BoardTools.IsRedChess(tempChessID)) {
                    continue;
                }
                result.Add(tempChessID);
            }
            return result;
        }

        public static List<int> GetMovePoints_Ma(Chart chart, int chessID) {
            List<int> result = new List<int>();
            int pointKey = chart.ChessPointKeys[chessID];
            List<int> movePoints = BoardTools.GetMovePoints(chessID, pointKey);

            for (int i = 0; i < movePoints.Count; i++) {
                int newPoint = movePoints[i];
                if (chart.PointHasChess(newPoint)) {
                    if (BoardTools.IsRedChess(chessID) == BoardTools.IsRedChess(chart.GetChessByPoint(newPoint))) {
                        continue;
                    }
                }
                if (chart.PointHasChess(BoardTools.GetMaFootPoint(pointKey, newPoint))) {
                    continue;
                }
                result.Add(newPoint);
            }
            return result;
        }


        public static List<int> GetInRangeChess_Ma(Chart chart, int chessID, bool isRedChess) {
            List<int> result = new List<int>();
            int pointKey = chart.ChessPointKeys[chessID];
            List<int> movePoints = BoardTools.GetMovePoints(chessID, pointKey);

            for (int i = 0; i < movePoints.Count; i++) {
                int newPoint = movePoints[i];
                if (chart.PointHasChess(BoardTools.GetMaFootPoint(pointKey, newPoint))) {
                    continue;
                }
                int tempChessID;
                if (!chart.GetChessByPoint(newPoint, out tempChessID)) {
                    continue;
                }
                if (isRedChess != BoardTools.IsRedChess(tempChessID)) {
                    continue;
                }
                result.Add(tempChessID);
            }
            return result;
        }


        /// <summary>
        /// 获取车的移动点
        /// </summary>
        /// <param name="chart"></param>
        /// <param name="chessID"></param>
        /// <param name="point"></param>
        /// <returns></returns>
        public static List<int> GetMovePoints_Che(Chart chart, int chessID) {
            List<int> result = new List<int>();
            int pointKey = chart.ChessPointKeys[chessID];
            List<int> movePoints = BoardTools.GetMovePoints(chessID, pointKey);
            for (int i = 0; i < movePoints.Count; i++) {
                int newPoint = movePoints[i];
                if (chart.PointHasChess(newPoint)) {
                    if (BoardTools.IsRedChess(chessID) == BoardTools.IsRedChess(chart.GetChessByPoint(newPoint))) {
                        continue;
                    }
                }
                if (chart.LineHasChess(pointKey, newPoint)) {
                    continue;
                }
                result.Add(newPoint);
            }
            return result;
        }

        public static List<int> GetInRangeChess_Che(Chart chart, int chessID, bool isRedChess) {
            List<int> result = new List<int>();
            int pointKey = chart.ChessPointKeys[chessID];
            List<int> movePoints = BoardTools.GetMovePoints(chessID, pointKey);
            for (int i = 0; i < movePoints.Count; i++) {
                int newPoint = movePoints[i];
                if (chart.LineHasChess(pointKey, newPoint)) {
                    continue;
                }
                int tempChessID;
                if (!chart.GetChessByPoint(newPoint, out tempChessID)) {
                    continue;
                }
                if (isRedChess == BoardTools.IsRedChess(tempChessID)) {
                    result.Add(tempChessID);
                }
            }
            return result;
        }

        public static List<int> GetMovePoints_Pao(Chart chart, int chessID) {
            List<int> result = new List<int>();
            int pointKey = chart.ChessPointKeys[chessID];
            List<int> movePoints = BoardTools.GetMovePoints(chessID, pointKey);
            for (int i = 0; i < movePoints.Count; i++) {
                int newPoint = movePoints[i];
                byte lineChessCount = chart.GetLineChessCount(pointKey, newPoint);
                if (1 < lineChessCount) {
                    continue;
                }
                if (1 == lineChessCount) {
                    if (!chart.PointHasChess(newPoint)) {
                        continue;
                    }
                    if (BoardTools.IsRedChess(chessID) == BoardTools.IsRedChess(chart.GetChessByPoint(newPoint))) {
                        continue;
                    }
                }
                if (0 == lineChessCount && chart.PointHasChess(newPoint)) {
                    continue;
                }
                result.Add(newPoint);
            }
            return result;
        }

        public static List<int> GetInRangeChess_Pao(Chart chart, int chessID, bool isRedChess) {
            List<int> result = new List<int>();
            int pointKey = chart.ChessPointKeys[chessID];
            List<int> movePoints = BoardTools.GetMovePoints(chessID, pointKey);
            for (int i = 0; i < movePoints.Count; i++) {
                int newPoint = movePoints[i];
                byte lineChessCount = chart.GetLineChessCount(pointKey, newPoint);
                if (1 < lineChessCount) {
                    continue;
                }
                if (0 == lineChessCount) {
                    continue;
                }
                int tempChessID;
                if (!chart.GetChessByPoint(newPoint, out tempChessID)) {
                    continue;
                }
                if (isRedChess != BoardTools.IsRedChess(tempChessID)) {
                    continue;
                }
                result.Add(tempChessID);
            }
            return result;
        }

        public static List<int> GetMovePoints_Bing(Chart chart, int chessID) {
            List<int> result = new List<int>();
            int pointKey = chart.ChessPointKeys[chessID];
            List<int> movePoints = BoardTools.GetMovePoints(chessID, pointKey);
            for (int i = 0; i < movePoints.Count; i++) {
                int newPoint = movePoints[i];
                if (chart.PointHasChess(newPoint)) {
                    if (BoardTools.IsRedChess(chessID) == BoardTools.IsRedChess(chart.GetChessByPoint(newPoint))) {
                        continue;
                    }
                }
                result.Add(newPoint);
            }
            return result;
        }

        public static List<int> GetInRangeChess_Bing(Chart chart, int chessID, bool isRedChess) {
            List<int> result = new List<int>();
            int pointKey = chart.ChessPointKeys[chessID];
            List<int> movePoints = BoardTools.GetMovePoints(chessID, pointKey);
            for (int i = 0; i < movePoints.Count; i++) {
                int newPoint = movePoints[i];
                int tempChessID;
                if (!chart.GetChessByPoint(newPoint, out tempChessID)) {
                    continue;
                }
                if (isRedChess != BoardTools.IsRedChess(tempChessID)) {
                    continue;
                }
                result.Add(tempChessID);
            }
            return result;
        }
    }
}
